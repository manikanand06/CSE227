package com.example.manik.connectiondemo;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.AsyncTask;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;

public class MainActivity extends AppCompatActivity {
    ConnectivityManager conn;
    static ImageView iv;
    static TextView tv1;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        iv=(ImageView)findViewById(R.id.iv);
        tv1=findViewById(R.id.tv1);
        conn=(ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);
    }
    public void dothis(View view)
    {
        String imagepath="http://placeimg.com/320/240";
        String textpath="http://www.google.com";

        if(conn!=null) {
            NetworkInfo networkInfo = conn.getActiveNetworkInfo();
            if(networkInfo!=null && networkInfo.isAvailable())
                if(networkInfo.getType()==ConnectivityManager.TYPE_WIFI)
                {
                    // networkInfo.getType();
                    Toast.makeText(this,"Downloading Via Wifi Network",Toast.LENGTH_SHORT).show();
                }
            if(networkInfo.getType()==ConnectivityManager.TYPE_MOBILE)
            {
                Toast.makeText(this,"Downloading Via Mobile Network",Toast.LENGTH_SHORT).show();
                new MyImageTask().execute(imagepath);
                new MyTextTask().execute(textpath);

            }
        }
    }

}
class MyImageTask extends AsyncTask<String,Void,Bitmap>
{

    @Override
    protected Bitmap doInBackground(String... string) {
        return downloadImage(string[0]);
    }

    @Override
    protected void onPostExecute(Bitmap bitmap) {
        if(bitmap!=null)
        {
            MainActivity.iv.setImageBitmap(bitmap);
        }
    }
    Bitmap downloadImage(String path)
    {
        Bitmap bitmap=null;
        try
        {
            URL url=new URL(path);
            HttpURLConnection httpURLConnection=(HttpURLConnection) url.openConnection();
            httpURLConnection.setReadTimeout(5000);
            httpURLConnection.setConnectTimeout(5000);
            httpURLConnection.setRequestMethod("GET");
            httpURLConnection.setDoInput(true);
            httpURLConnection.connect();

            int code=httpURLConnection.getResponseCode();
            if(code==httpURLConnection.HTTP_OK)
            {
                InputStream stream= httpURLConnection.getInputStream();
                if(stream!=null)
                {
                    bitmap= BitmapFactory.decodeStream(stream);
                }
            }
        }
        catch (MalformedURLException e)
        {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }

        return bitmap;
    }
}


class MyTextTask extends AsyncTask<String, Void,String>
{
    @Override
    protected String doInBackground(String... strings) {
        return downLoadText(strings[0]);
    }

    @Override
    protected void onPostExecute(String s) {

        if(s!=null)
        {
            MainActivity.tv1.setText(s);
        }

    }

    String downLoadText(String path)
    {
        String text = null;
        try {
            URL url = new URL(path);
            HttpURLConnection httpURLConnection = (HttpURLConnection) url.openConnection();
            httpURLConnection.setConnectTimeout(3000);
            httpURLConnection.setReadTimeout(3000);
            httpURLConnection.setRequestMethod("GET");

            httpURLConnection.setDoInput(true);
            httpURLConnection.connect();

            int code = httpURLConnection.getResponseCode();
            if(code == HttpURLConnection.HTTP_OK) {
                InputStream inputStream = httpURLConnection.getInputStream();
                if (inputStream != null) {
                    BufferedReader br = new BufferedReader(new InputStreamReader(inputStream));
                    StringBuilder sb = new StringBuilder();
                    String line = "";
                    while ((line = br.readLine()) != null) {
                        sb.append(line + "\n");
                    }

                    text = sb.toString();
                }
            }

        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return text;

    }
}